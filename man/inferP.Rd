% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inferP.R
\name{inferP}
\alias{inferP}
\title{Calculation of lower and upper probability bounds}
\usage{
inferP(target, ...)
}
\arguments{
\item{target}{The desired probability expression.}

\item{...}{Probability constraints (see Details).}
}
\value{
A vector of \code{min} and \code{max} values of the target probability, or \code{NA} if the constraints are mutually contradictory. If \code{min} and \code{max} are \code{0} and \code{1} then the constraints do not restrict the target probability in any way.
}
\description{
Compute the minimum and maximum allowed values of the probability of a propositional-logic expression conditional on another one, given numerical or equality constraints for the conditional probabilities of other propositional-logic expressions.
}
\details{
The function takes as first argument the probability of apropositional-logic expression, conditional on another expression, and as subsequent arguments the constraints on the probabilities of other propositional-logic expressions.

Each constraint can have one of these four forms:

\if{html}{\out{<div class="sourceCode">}}\preformatted{P(...|...) = [number]

P(...|...) = P(...|...)

P(...|...) = P(...|...) * [number]

P(...|...) = P(...|...) / [number]
}\if{html}{\out{</div>}}

where \code{...} are (possibly different) propositional-logic expressions. Inequalities \code{<=} \code{>=} are also allowed instead of equalities.

All probability expressions must start with \code{P} or \code{p} or \code{Pr} followed by parentheses. The symbol for the conditional bar and the logical connectives are as follows:
\itemize{
\item Conditional bar: \code{~}
\item Not: \code{!}
\item And: \code{&&} or \code{&}
\item Or: \code{||} or \code{|}
\item If-then: \verb{\%>\%} (internally \code{a \%>\% b} is defined as \code{b || !a})
}

The expressions otherwise follow the standard rules for R logical expressions.
For instance,\cr
"P(¬(a ∨ b) ⇒ c | c ∧ I)"\cr
is written (adding spaces for clarity)

\if{html}{\out{<div class="sourceCode">}}\preformatted{P( !(a | b) \%>\% c  ~  c & I )
}\if{html}{\out{</div>}}

Note that \emph{all} probabilities appearing in the function are understood to have a common, and-ed sentence "... ∧ I" in their conditional, if such a sentence doesn't appear explicitly. Otherwise the probabilities would be unrelated a priori.

The function uses the \code{lpSolve::lp()} function from the \href{https://cran.r-project.org/package=lpSolve}{\strong{lpSolve}} package.
}
\examples{
inferP(
  target = P(a & b ~ h), # P(a ∧ b | h) in standard notation
  P(a ~ h) == 0.3,
  P(b ~ h) == 0.6
)
## min max
## 0.0 0.3

inferP(
    target = P(a & b ~ h), # P(a ∧ b | h) in standard notation
    P(a ~ h) == 0.3,
    P(b ~ a & h) == 0.2
)
##  min  max
## 0.06 0.06

## Solution to the Monty Hall problem:
inferP(
  target = P(car1 ~ you1 & host2 & I),
  P(car1 | car2 | car3 ~ I) == 1,
  P(car1 & car2 ~ I) == 0,
  P(car1 & car3 ~ I) == 0,
  P(car2 & car3 ~ I) == 0,
  P(host1 & you1 ~ I) == 0,
  P(host2 & you2 ~ I) == 0,
  P(host3 & you3 ~ I) == 0,
  P(host1 & car1 ~ I) == 0,
  P(host2 & car2 ~ I) == 0,
  P(host3 & car3 ~ I) == 0,
  P(host1 & host2 ~ I) == 0,
  P(host1 & host3 ~ I) == 0,
  P(host2 & host3 ~ I) == 0,
  P(host1 | host2 | host3 ~ I) == 1,
  P(host2 ~ car1 & you1 & I) == P(host3 ~ car1 & you1 & I),
  P(car1 ~ I) == 1/3,
  P(car2 ~ I) == 1/3,
  P(car3 ~ I) == 1/3,
  P(car1 ~ you1 & I) == 1/3,
  P(car2 ~ you1 & I) == 1/3,
  P(car3 ~ you1 & I) == 1/3
)
##      min      max
## 0.333333 0.333333

}
